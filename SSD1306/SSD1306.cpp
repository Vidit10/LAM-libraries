#include "SSD1306.h"

const uint8_t font5x7[][5] =
    {
        {0x00, 0x00, 0x00, 0x00, 0x00}, // (space)
        {0x00, 0x00, 0x5F, 0x00, 0x00}, // !
        {0x00, 0x07, 0x00, 0x07, 0x00}, // "
        {0x14, 0x7F, 0x14, 0x7F, 0x14}, // #
        {0x24, 0x2A, 0x7F, 0x2A, 0x12}, // $
        {0x23, 0x13, 0x08, 0x64, 0x62}, // %
        {0x36, 0x49, 0x55, 0x22, 0x50}, // &
        {0x00, 0x05, 0x03, 0x00, 0x00}, // '
        {0x00, 0x1C, 0x22, 0x41, 0x00}, // (
        {0x00, 0x41, 0x22, 0x1C, 0x00}, // )
        {0x08, 0x2A, 0x1C, 0x2A, 0x08}, // *
        {0x08, 0x08, 0x3E, 0x08, 0x08}, // +
        {0x00, 0x50, 0x30, 0x00, 0x00}, // ,
        {0x08, 0x08, 0x08, 0x08, 0x08}, // -
        {0x00, 0x60, 0x60, 0x00, 0x00}, // .
        {0x20, 0x10, 0x08, 0x04, 0x02}, // /
        {0x3E, 0x51, 0x49, 0x45, 0x3E}, // 0
        {0x00, 0x42, 0x7F, 0x40, 0x00}, // 1
        {0x42, 0x61, 0x51, 0x49, 0x46}, // 2
        {0x21, 0x41, 0x45, 0x4B, 0x31}, // 3
        {0x18, 0x14, 0x12, 0x7F, 0x10}, // 4
        {0x27, 0x45, 0x45, 0x45, 0x39}, // 5
        {0x3C, 0x4A, 0x49, 0x49, 0x30}, // 6
        {0x01, 0x71, 0x09, 0x05, 0x03}, // 7
        {0x36, 0x49, 0x49, 0x49, 0x36}, // 8
        {0x06, 0x49, 0x49, 0x29, 0x1E}, // 9
        {0x00, 0x36, 0x36, 0x00, 0x00}, // :
        {0x00, 0x56, 0x36, 0x00, 0x00}, // ;
        {0x00, 0x08, 0x14, 0x22, 0x41}, // <
        {0x14, 0x14, 0x14, 0x14, 0x14}, // =
        {0x41, 0x22, 0x14, 0x08, 0x00}, // >
        {0x02, 0x01, 0x51, 0x09, 0x06}, // ?
        {0x32, 0x49, 0x79, 0x41, 0x3E}, // @
        {0x7E, 0x11, 0x11, 0x11, 0x7E}, // A
        {0x7F, 0x49, 0x49, 0x49, 0x36}, // B
        {0x3E, 0x41, 0x41, 0x41, 0x22}, // C
        {0x7F, 0x41, 0x41, 0x22, 0x1C}, // D
        {0x7F, 0x49, 0x49, 0x49, 0x41}, // E
        {0x7F, 0x09, 0x09, 0x01, 0x01}, // F
        {0x3E, 0x41, 0x41, 0x51, 0x32}, // G
        {0x7F, 0x08, 0x08, 0x08, 0x7F}, // H
        {0x00, 0x41, 0x7F, 0x41, 0x00}, // I
        {0x20, 0x40, 0x41, 0x3F, 0x01}, // J
        {0x7F, 0x08, 0x14, 0x22, 0x41}, // K
        {0x7F, 0x40, 0x40, 0x40, 0x40}, // L
        {0x7F, 0x02, 0x04, 0x02, 0x7F}, // M
        {0x7F, 0x04, 0x08, 0x10, 0x7F}, // N
        {0x3E, 0x41, 0x41, 0x41, 0x3E}, // O
        {0x7F, 0x09, 0x09, 0x09, 0x06}, // P
        {0x3E, 0x41, 0x51, 0x21, 0x5E}, // Q
        {0x7F, 0x09, 0x19, 0x29, 0x46}, // R
        {0x46, 0x49, 0x49, 0x49, 0x31}, // S
        {0x01, 0x01, 0x7F, 0x01, 0x01}, // T
        {0x3F, 0x40, 0x40, 0x40, 0x3F}, // U
        {0x1F, 0x20, 0x40, 0x20, 0x1F}, // V
        {0x7F, 0x20, 0x18, 0x20, 0x7F}, // W
        {0x63, 0x14, 0x08, 0x14, 0x63}, // X
        {0x03, 0x04, 0x78, 0x04, 0x03}, // Y
        {0x61, 0x51, 0x49, 0x45, 0x43}, // Z
        {0x00, 0x00, 0x7F, 0x41, 0x41}, // [
        {0x02, 0x04, 0x08, 0x10, 0x20}, // "\"
        {0x41, 0x41, 0x7F, 0x00, 0x00}, // ]
        {0x04, 0x02, 0x01, 0x02, 0x04}, // ^
        {0x40, 0x40, 0x40, 0x40, 0x40}, // _
        {0x00, 0x01, 0x02, 0x04, 0x00}, // `
        {0x20, 0x54, 0x54, 0x54, 0x78}, // a
        {0x7F, 0x48, 0x44, 0x44, 0x38}, // b
        {0x38, 0x44, 0x44, 0x44, 0x20}, // c
        {0x38, 0x44, 0x44, 0x48, 0x7F}, // d
        {0x38, 0x54, 0x54, 0x54, 0x18}, // e
        {0x08, 0x7E, 0x09, 0x01, 0x02}, // f
        {0x08, 0x14, 0x54, 0x54, 0x3C}, // g
        {0x7F, 0x08, 0x04, 0x04, 0x78}, // h
        {0x00, 0x44, 0x7D, 0x40, 0x00}, // i
        {0x20, 0x40, 0x44, 0x3D, 0x00}, // j
        {0x00, 0x7F, 0x10, 0x28, 0x44}, // k
        {0x00, 0x41, 0x7F, 0x40, 0x00}, // l
        {0x7C, 0x04, 0x18, 0x04, 0x78}, // m
        {0x7C, 0x08, 0x04, 0x04, 0x78}, // n
        {0x38, 0x44, 0x44, 0x44, 0x38}, // o
        {0x7C, 0x14, 0x14, 0x14, 0x08}, // p
        {0x08, 0x14, 0x14, 0x18, 0x7C}, // q
        {0x7C, 0x08, 0x04, 0x04, 0x08}, // r
        {0x48, 0x54, 0x54, 0x54, 0x20}, // s
        {0x04, 0x3F, 0x44, 0x40, 0x20}, // t
        {0x3C, 0x40, 0x40, 0x20, 0x7C}, // u
        {0x1C, 0x20, 0x40, 0x20, 0x1C}, // v
        {0x3C, 0x40, 0x30, 0x40, 0x3C}, // w
        {0x44, 0x28, 0x10, 0x28, 0x44}, // x
        {0x0C, 0x50, 0x50, 0x50, 0x3C}, // y
        {0x44, 0x64, 0x54, 0x4C, 0x44}, // z
        {0x00, 0x08, 0x36, 0x41, 0x00}, // {
        {0x00, 0x00, 0x7F, 0x00, 0x00}, // |
        {0x00, 0x41, 0x36, 0x08, 0x00}, // }
        {0x08, 0x08, 0x2A, 0x1C, 0x08}, // ->
        {
            0x08, 0x1C, 0x2A, 0x08, 0x08} // <-
};

SSD1306::SSD1306()
{
}

void SSD1306::begin()
{
    Wire.begin();
    sendCommand(0xAE); // Display off
    sendCommand(0xD5); // Set display clock divide ratio
    sendCommand(0x80); // Suggested ratio
    sendCommand(0xA8); // Set multiplex ratio
    sendCommand(0x3F);
    sendCommand(0xD3); // Set display offset
    sendCommand(0x00); // No offset
    sendCommand(0x40); // Set start line to 0
    sendCommand(0x8D); // Enable charge pump
    sendCommand(0x14);
    sendCommand(0x20); // Memory mode
    sendCommand(0x00); // Horizontal addressing mode
    sendCommand(0xA1); // Set segment re-map
    sendCommand(0xC8); // Set COM output scan direction
    sendCommand(0xDA); // Set COM pins
    sendCommand(0x12);
    sendCommand(0x81); // Set contrast
    sendCommand(0xCF);
    sendCommand(0xD9); // Set pre-charge period
    sendCommand(0xF1);
    sendCommand(0xDB); // Set VCOMH
    sendCommand(0x40);
    sendCommand(0xA4); // Display resume
    sendCommand(0xA6); // Normal display
    sendCommand(0xAF); // Display on
    clearDisplay();
    display();
}

void SSD1306::sendCommand(uint8_t command)
{
    Wire.beginTransmission(SSD1306_ADDRESS);
    Wire.write(0x00);
    Wire.write(command);
    Wire.endTransmission();
}

void SSD1306::sendData(uint8_t data)
{
    Wire.beginTransmission(SSD1306_ADDRESS);
    Wire.write(0x40);
    Wire.write(data);
    Wire.endTransmission();
}

void SSD1306::clearDisplay()
{
    for (uint16_t i = 0; i < sizeof(buffer); i++)
    {
        buffer[i] = 0;
    }
}

void SSD1306::display()
{
    sendCommand(0x21); // Column address
    sendCommand(0);    // Start column
    sendCommand(127);  // End column
    sendCommand(0x22); // Page address
    sendCommand(0);    // Start page
    sendCommand(7);    // End page

    for (uint16_t i = 0; i < sizeof(buffer); i++)
    {
        sendData(buffer[i]);
    }
}

void SSD1306::drawPixel(uint8_t x, uint8_t y, uint8_t color)
{
    if (x >= 128 || y >= 64)
        return;

    switch (color)
    {
    case SSD1306_WHITE:
        buffer[x + (y / 8) * 128] |= (1 << (y & 7));
        break;
    case SSD1306_BLACK:
        buffer[x + (y / 8) * 128] &= ~(1 << (y & 7));
        break;
    }
}

void SSD1306::drawText(const char *text, uint8_t x, uint8_t y)
{
    while (*text)
    {
        for (int i = 0; i < 5; i++)
        {
            buffer[x + (y / 8) * 128 + i] = font5x7[*text - 32][i];
        }
        x += 6; // Move to the next character position (5 pixels for char + 1 pixel space)
        text++;
    }
}

void SSD1306::drawText(float text, uint8_t x, uint8_t y)
{
    char buffer[10]; // Adjust the size as needed

    // Convert the float to a character array with 2 decimal places
    snprintf(buffer, sizeof(buffer), "%.2f", text); // 2 decimal places

    // Call the existing `drawText` function that accepts a `char*`
    drawText(buffer, x, y);

}

void SSD1306::drawTable()
{
    clearDisplay();
    // Upar wala table
    drawText("+-------------------+", 0, 0);    // 19 dashes and two addition symbols
    for(int i=8; i<=8*2; i+=8){
        drawText("|", 0, i);
        drawText("|", 60, i);
        drawText("|", 120, i);
    }
    drawText("+-------------------+", 0, 20);
    for(int i=8*3; i<=8*4; i+=8){
        drawText("|", 0, i);
        drawText("|", 60, i);
        drawText("|", 120, i);
    }
    drawText("+-------------------+", 0, 40);

    // Table headers
    drawText("PV", 24, 8);    // Process value
    drawText("SV", 88, 8);    // Set value
    drawText("Long press to select", 4, 48);
    
    // Displaying the table
    display();
}
